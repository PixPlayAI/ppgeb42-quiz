import React, { useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import { generateScenarioContent } from '../../services/openai';

// Configura√ß√£o inicial sempre com "Carregando..."
let SCENARIO_CONFIG = {
  id: 'scenario1',
  title: 'Cen√°rio I: Atenua√ß√£o de Radia√ß√£o',
  question: 'Carregando...',
  options: [
    {
      id: 'option1',
      text: 'Carregando...',
      isCorrect: true,
    },
    {
      id: 'option2',
      text: 'Carregando...',
      isCorrect: false,
    },
    {
      id: 'option3',
      text: 'Carregando...',
      isCorrect: false,
    },
    {
      id: 'option4',
      text: 'Carregando...',
      isCorrect: false,
    },
  ],
  successMessage: 'Carregando...',
  detailedExplanation: 'Carregando...',
};

// Vari√°vel para controlar a inicializa√ß√£o
let isInitialized = false;

// Fun√ß√£o para resetar a configura√ß√£o
const resetConfig = () => {
  SCENARIO_CONFIG = {
    id: 'scenario1',
    title: 'Cen√°rio I: Atenua√ß√£o de Radia√ß√£o',
    question: 'Carregando...',
    options: [
      {
        id: 'option1',
        text: 'Carregando...',
        isCorrect: true,
      },
      {
        id: 'option2',
        text: 'Carregando...',
        isCorrect: false,
      },
      {
        id: 'option3',
        text: 'Carregando...',
        isCorrect: false,
      },
      {
        id: 'option4',
        text: 'Carregando...',
        isCorrect: false,
      },
    ],
    successMessage: 'Carregando...',
    detailedExplanation: 'Carregando...',
  };
};

// Configura√ß√µes da simula√ß√£o
const SIMULATION_CONFIG = {
  SOURCE_POSITION: -2.0, // Posi√ß√£o inicial da fonte no eixo X. Alterar este valor move a fonte.
  BOUNDARY_RADIUS: 9.0, // Raio do limite onde as part√≠culas s√£o removidas da simula√ß√£o.
  BASE_SPEED: 3.0, // Velocidade base das part√≠culas. Aumentar este valor faz as part√≠culas se moverem mais r√°pido.
  TIME_SCALE: 1, // Escala de tempo da simula√ß√£o. Aumentar acelera o tempo, diminuir desacelera.
  REMOVAL_THRESHOLD: 1.5, // Limite de dist√¢ncia para remo√ß√£o das part√≠culas.
  PARTICLE_SIZE: 0.2, // Tamanho visual das part√≠culas na simula√ß√£o.
  HEAD_LENGTH: 0.1, // Comprimento da cabe√ßa das setas que representam as part√≠culas.
  HEAD_WIDTH: 0.1, // Largura da cabe√ßa das setas.
  MIN_TRAVEL_DISTANCE: 4.0, // Dist√¢ncia m√≠nima que as part√≠culas viajam antes de serem removidas.
  CANNON_LENGTH: 0.8, // Comprimento do canh√£o (representa√ß√£o da fonte).
  CANNON_RADIUS: 0.15, // Raio do canh√£o.
  CANNON_SEGMENTS: 32, // N√∫mero de segmentos para desenhar o canh√£o (define a suavidade).
  CANNON_OPENING_RADIUS: 0.05, // Raio de abertura do canh√£o.
  EMISSION_ANGLE: 15, // √Çngulo de emiss√£o do canh√£o em graus. Alterar este valor muda a dire√ß√£o inicial das part√≠culas.
  EMISSION_ANGLE_SPREAD: 15, // √Çngulo de espalhamento das part√≠culas em graus. Alterar este valor muda a dispers√£o das part√≠culas emitidas.
};

// Prompt que √© enviado para a API do OpenAI para gerar o conte√∫do do cen√°rio.
// Se quiser alterar o prompt que busca a resposta da API, modifique o texto abaixo.
const scenarioPrompt = `Gere uma quest√£o de m√∫ltipla escolha sobre o seguinte cen√°rio:
S√£o mostrados dois cen√°rios de atenua√ß√£o de radia√ß√£o em 3D:
- No primeiro cen√°rio, a radia√ß√£o interage com uma barreira com baixo coeficiente de atenua√ß√£o
- No segundo cen√°rio, a radia√ß√£o interage com uma barreira com alto coeficiente de atenua√ß√£o
- Em ambos os cen√°rios, a fonte radioativa √© a mesma e emite part√≠culas com a mesma energia

A quest√£o deve avaliar se o aluno compreende os conceitos de atenua√ß√£o de radia√ß√£o e intera√ß√£o com a mat√©ria. IMPORTANTE: Os textos devem ser curtos pois o candidato ter√° aproximadamente 20 segundos para ver o cen√°rio ler tudo e marcar a resposta correta.

Requisitos:
- A quest√£o deve ter 4 alternativas
- Apenas uma alternativa deve estar correta
- As alternativas incorretas devem ser plaus√≠veis mas claramente distingu√≠veis e uma alternativa deve ser absurda e totalmente nada a ver ir√¥nica ou engra√ßada.
- Foque na f√≠sica da intera√ß√£o da radia√ß√£o com a mat√©ria
- Inclua uma mensagem de parab√©ns que reforce o conceito espec√≠fico que o aluno demonstrou dominar
- Inclua uma explica√ß√£o detalhada da resposta correta e porque as outras alternativas est√£o erradas
- Os textos devem ser curtos pois o candidato ter√° aproximadamente 20 segundos para ver o cen√°rio ler tudo e marcar a resposta correta.

Retorne a resposta EXATAMENTE neste formato JSON:
{
  "id": "scenario1",
  "title": "",
  "question": "[Sua pergunta aqui]",
  "options": [
    {
      "id": "option1",
      "text": "[Texto da primeira alternativa]",
      "isCorrect": true
    },
    {
      "id": "option2",
      "text": "[Texto da segunda alternativa]",
      "isCorrect": false
    },
    {
      "id": "option3",
      "text": "[Texto da terceira alternativa]",
      "isCorrect": false
    },
    {
      "id": "option4",
      "text": "[Texto da quarta alternativa]",
      "isCorrect": false
    }
  ],
  "successMessage": "[Mensagem de parab√©ns explicando porque a resposta est√° correta e refor√ßando o conceito que o aluno dominou, importante n√£o citar os n√∫meros da alternativa como por exemplo primeira, segunda, terceira, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas]",
  "detailedExplanation": "[Explica√ß√£o detalhada da resposta correta e an√°lise de por que cada uma das outras alternativas est√° incorreta, importante n√£o citar os n√∫meros da alternativa como por exemplo primeira, segunda, terceira, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas]"
}`;

// Fun√ß√£o para obter a configura√ß√£o espec√≠fica do cen√°rio
const getSimulationConfig = (scenarioNumber) => {
  return {
    particleInterval: 5, // Intervalo entre emiss√µes de part√≠culas em milissegundos. Diminuir este valor faz a fonte emitir mais part√≠culas.
    maxParticles: 400, // N√∫mero m√°ximo de part√≠culas na cena. Aumentar este valor permite mais part√≠culas simultaneamente.
    ricochetProbability: scenarioNumber === 2 ? 0.8 : 0.2, // Probabilidade de ricochete (reflex√£o) na barreira. Alterar este valor muda o coeficiente de atenua√ß√£o (maior valor, mais reflex√£o).
    transmissionProbability: scenarioNumber === 2 ? 0.15 : 0.7, // Probabilidade de transmiss√£o atrav√©s da barreira. Alterar este valor muda o coeficiente de atenua√ß√£o (maior valor, mais transmiss√£o).
  };
};

const Scenario1 = ({ isPlaying, isDark, scenarioNumber = 1 }) => {
  const mountRef = useRef(null);
  const particlesRef = useRef([]);
  const lastParticleTimeRef = useRef(0);
  const animationFrameRef = useRef();
  const lastUpdateTimeRef = useRef(Date.now());
  const sceneRef = useRef(null);
  const cameraRef = useRef(null);
  const rendererRef = useRef(null);
  const controlsRef = useRef(null);
  const labelRef = useRef(null);

  // Fun√ß√£o para atualizar a configura√ß√£o e disparar evento
  const updateConfig = useCallback((newConfig) => {
    SCENARIO_CONFIG = newConfig;
    window.dispatchEvent(new CustomEvent('scenarioConfigUpdated'));
  }, []);

  useEffect(() => {
    const fetchScenarioContent = async () => {
      // Se j√° foi inicializado, n√£o faz nada
      if (isInitialized) return;

      try {
        isInitialized = true; // Marca como inicializado antes da chamada
        const generatedContent = await generateScenarioContent(scenarioPrompt);

        // Verifica se o conte√∫do foi gerado corretamente
        if (!generatedContent.successMessage || !generatedContent.detailedExplanation) {
          generatedContent.successMessage =
            'Parab√©ns! Voc√™ demonstrou compreender os princ√≠pios f√≠sicos da intera√ß√£o da radia√ß√£o com a mat√©ria e como diferentes materiais afetam a atenua√ß√£o da radia√ß√£o.';
          generatedContent.detailedExplanation =
            'A resposta correta considera que a atenua√ß√£o est√° diretamente relacionada √†s propriedades do material, como o coeficiente de atenua√ß√£o, que determina o quanto o material pode bloquear ou absorver a radia√ß√£o. ' +
            'Al√©m disso, o mesmo feixe de radia√ß√£o interage de maneira diferente com materiais distintos, devido √†s suas caracter√≠sticas intr√≠nsecas. ' +
            'As outras respostas est√£o incorretas porque confundem as propriedades dos materiais com as da radia√ß√£o, ou n√£o interpretam corretamente os mecanismos de intera√ß√£o envolvidos. ' +
            'Algumas ainda apresentam conceitos que n√£o s√£o fisicamente consistentes, como sugerir resultados que n√£o s√£o poss√≠veis segundo os princ√≠pios f√≠sicos.N√£o cite o n√∫mero da alternativa como por exemplo primeira, segunda, terceira, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas';
        }

        // Atualiza a configura√ß√£o
        SCENARIO_CONFIG = {
          ...generatedContent,
          id: 'scenario1',
          title: 'MonteCarloQuiz.online PPGEB42 turma 2024/02',
        };

        // Dispara o evento de atualiza√ß√£o
        updateConfig(SCENARIO_CONFIG);
      } catch (error) {
        console.error('üî¥ Erro ao buscar conte√∫do:', error);
        isInitialized = false; // Reset em caso de erro

        // Configura√ß√£o de fallback
        const fallbackConfig = {
          ...SCENARIO_CONFIG,
          successMessage:
            'Parab√©ns! Voc√™ demonstrou compreender os princ√≠pios f√≠sicos da intera√ß√£o da radia√ß√£o com a mat√©ria e como diferentes materiais afetam a atenua√ß√£o da radia√ß√£o.',
          detailedExplanation:
            'A resposta correta considera que a atenua√ß√£o est√° diretamente ligada √†s propriedades do material, sendo influenciada por fatores como o coeficiente de atenua√ß√£o, que determina a capacidade do material de absorver ou bloquear a radia√ß√£o. ' +
            'O mesmo feixe de radia√ß√£o pode interagir de maneiras distintas dependendo das caracter√≠sticas intr√≠nsecas do material atravessado. ' +
            'As outras respostas est√£o incorretas porque apresentam conceitos equivocados, como confundir as propriedades do material com as da radia√ß√£o, ignorar os mecanismos corretos de intera√ß√£o ou sugerir interpreta√ß√µes que n√£o s√£o fisicamente consistentes. N√£o cite o n√∫mero da alternativa como por exemplo primeira, segunda, terceira, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas',
        };

        // Atualiza a configura√ß√£o com fallback
        SCENARIO_CONFIG = fallbackConfig;
        updateConfig(SCENARIO_CONFIG);
      }
    };

    resetConfig();
    fetchScenarioContent();

    // Cleanup
    return () => {
      // N√£o reseta isInitialized no cleanup para manter o cache
    };
  }, [updateConfig]);

  useEffect(() => {
    if (!sceneRef.current) {
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(isDark ? 0x444444 : 0xffffff);
      sceneRef.current = scene;

      const camera = new THREE.PerspectiveCamera(65, 400 / 300, 0.2, 1000);
      camera.position.set(0.8, 0.5, 3.0);
      cameraRef.current = camera;

      const renderer = new THREE.WebGLRenderer({ antialias: true });
      renderer.setSize(400, 300);
      rendererRef.current = renderer;
      mountRef.current?.appendChild(renderer.domElement);

      const controls = new OrbitControls(camera, renderer.domElement);
      controls.enableDamping = true;
      controls.target.set(SIMULATION_CONFIG.SOURCE_POSITION / 2, 0, 0);
      controls.minDistance = 2.0;
      controls.maxDistance = 10.0;
      controlsRef.current = controls;

      const ambientLight = new THREE.AmbientLight(0xffffff, 0.8);
      scene.add(ambientLight);

      const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
      directionalLight.position.set(5, 5, 5);
      scene.add(directionalLight);

      // Cria o canh√£o (fonte de part√≠culas)
      const emissionAngle = THREE.MathUtils.degToRad(SIMULATION_CONFIG.EMISSION_ANGLE);
      const cannonGeometry = new THREE.CylinderGeometry(
        SIMULATION_CONFIG.CANNON_RADIUS,
        SIMULATION_CONFIG.CANNON_RADIUS,
        SIMULATION_CONFIG.CANNON_LENGTH,
        SIMULATION_CONFIG.CANNON_SEGMENTS
      );
      const cannonMaterial = new THREE.MeshPhongMaterial({
        color: 0x666666,
        metalness: 0.8,
        roughness: 0.2,
      });
      const cannon = new THREE.Mesh(cannonGeometry, cannonMaterial);

      cannon.rotation.z = Math.PI / 2 + emissionAngle;

      const cannonPosition = new THREE.Vector3(
        SIMULATION_CONFIG.SOURCE_POSITION +
          (SIMULATION_CONFIG.CANNON_LENGTH / 2) * Math.cos(emissionAngle),
        (SIMULATION_CONFIG.CANNON_LENGTH / 2) * Math.sin(emissionAngle),
        0
      );
      cannon.position.copy(cannonPosition);
      scene.add(cannon);

      // Cria o anteparo (barreira) na posi√ß√£o central.
      // Para aumentar a espessura do anteparo, altere o primeiro par√¢metro (0.2) da BoxGeometry abaixo.
      const barrier = new THREE.Mesh(
        new THREE.BoxGeometry(0.2, 2.5, 1.0),
        new THREE.MeshPhongMaterial({
          color: isDark ? 0x4b5563 : 0x555555,
          transparent: true,
          opacity: 0.9,
        })
      );
      barrier.position.set(0, 0, 0);
      scene.add(barrier);

      const label = new THREE.Mesh(
        new THREE.PlaneGeometry(1.5, 0.4),
        new THREE.MeshBasicMaterial({
          map: new THREE.CanvasTexture(createTextCanvas(`Cen√°rio ${scenarioNumber}`)),
          transparent: true,
          side: THREE.DoubleSide,
        })
      );
      label.position.set(0, 1.5, 0);
      scene.add(label);
      labelRef.current = label;
    }

    if (sceneRef.current) {
      sceneRef.current.background = new THREE.Color(isDark ? 0x444444 : 0xffffff);
    }

    const barrier = sceneRef.current.children.find(
      (child) => child.geometry instanceof THREE.BoxGeometry
    );
    if (barrier) {
      barrier.material.color.set(isDark ? 0x4b5563 : 0x555555);
    }
  }, [isDark, scenarioNumber]);

  useEffect(() => {
    const scene = sceneRef.current;
    const camera = cameraRef.current;
    const renderer = rendererRef.current;
    const controls = controlsRef.current;
    const label = labelRef.current;

    if (!scene || !camera || !renderer || !controls || !label) return;

    const scenarioConfig = getSimulationConfig(scenarioNumber);

    // Converte o √¢ngulo de emiss√£o para radianos
    const emissionAngle = THREE.MathUtils.degToRad(SIMULATION_CONFIG.EMISSION_ANGLE);

    // Fun√ß√£o respons√°vel por criar uma nova part√≠cula
    const createParticle = () => {
      // Gera √¢ngulos aleat√≥rios para a dire√ß√£o inicial da part√≠cula dentro do espalhamento definido.
      const theta = THREE.MathUtils.degToRad(
        THREE.MathUtils.randFloatSpread(SIMULATION_CONFIG.EMISSION_ANGLE_SPREAD)
      ); // √Çngulo aleat√≥rio em torno do eixo Y.
      const phi = THREE.MathUtils.degToRad(
        THREE.MathUtils.randFloatSpread(SIMULATION_CONFIG.EMISSION_ANGLE_SPREAD)
      ); // √Çngulo aleat√≥rio em torno do eixo Z.

      // Calcula a velocidade inicial da part√≠cula com base nos √¢ngulos aleat√≥rios.
      const velocity = new THREE.Vector3(
        SIMULATION_CONFIG.BASE_SPEED * Math.cos(theta) * Math.cos(phi),
        SIMULATION_CONFIG.BASE_SPEED * Math.sin(phi) + 1,
        SIMULATION_CONFIG.BASE_SPEED * Math.sin(theta) * Math.cos(phi)
      );

      // Define a posi√ß√£o inicial da part√≠cula na ponta do canh√£o.
      const position = new THREE.Vector3(
        SIMULATION_CONFIG.SOURCE_POSITION +
          (SIMULATION_CONFIG.CANNON_LENGTH / 2) * Math.cos(emissionAngle),
        (SIMULATION_CONFIG.CANNON_LENGTH / 2) * Math.sin(emissionAngle),
        0
      );

      // Cria uma seta para representar a part√≠cula.
      const particle = new THREE.ArrowHelper(
        velocity.clone().normalize(),
        position.clone(),
        SIMULATION_CONFIG.PARTICLE_SIZE,
        0xff0000,
        SIMULATION_CONFIG.HEAD_LENGTH,
        SIMULATION_CONFIG.HEAD_WIDTH
      );

      particle.userData = {
        velocity: velocity,
        position: position.clone(),
        lastPosition: position.clone(),
        active: true,
      };

      return particle;
    };

    // Fun√ß√£o respons√°vel por atualizar as part√≠culas existentes na cena.
    // Esta fun√ß√£o √© respons√°vel por guiar as part√≠culas em movimento retil√≠neo uniforme (MRU).
    const updateParticles = (deltaTime) => {
      const scaledDelta = deltaTime * SIMULATION_CONFIG.TIME_SCALE;

      // Limpa part√≠culas antigas se ultrapassar o m√°ximo permitido.
      while (particlesRef.current.length >= scenarioConfig.maxParticles) {
        const oldestParticle = particlesRef.current.shift();
        scene.remove(oldestParticle);
      }

      particlesRef.current = particlesRef.current.filter((particle) => {
        if (!particle.userData.active) return false;

        const { velocity, position, lastPosition } = particle.userData;
        position.copy(lastPosition).add(velocity.clone().multiplyScalar(scaledDelta));

        // Verifica colis√£o com o anteparo (barreira)
        // Os limites abaixo devem corresponder √† metade das dimens√µes do anteparo definido na BoxGeometry
        if (
          position.x >= -0.1 && // Metade da espessura do anteparo em X
          position.x <= 0.1 &&
          position.y >= -1.25 && // Metade da altura do anteparo em Y
          position.y <= 1.25 &&
          position.z >= -0.5 && // Metade da profundidade do anteparo em Z
          position.z <= 0.5
        ) {
          const rand = Math.random();

          if (rand < scenarioConfig.ricochetProbability) {
            // Part√≠cula ricocheteia (reflete) na barreira
            velocity.x *= -1;
            position.x = velocity.x > 0 ? 0.11 : -0.11;
          } else if (
            rand <
            scenarioConfig.ricochetProbability + scenarioConfig.transmissionProbability
          ) {
            // Part√≠cula √© transmitida atrav√©s da barreira
            position.x = velocity.x > 0 ? 0.11 : -0.11;
          } else {
            // Part√≠cula √© absorvida pela barreira e removida
            scene.remove(particle);
            return false;
          }
        }

        particle.position.copy(position);
        particle.setDirection(velocity.clone().normalize());
        lastPosition.copy(position);

        // Remove part√≠culas que sa√≠ram dos limites da cena
        if (position.length() > SIMULATION_CONFIG.BOUNDARY_RADIUS) {
          scene.remove(particle);
          return false;
        }

        return true;
      });
    };

    const animate = () => {
      if (isPlaying) {
        const currentTime = Date.now();
        const deltaTime = Math.min((currentTime - lastUpdateTimeRef.current) * 0.001, 0.1);
        lastUpdateTimeRef.current = currentTime;

        if (currentTime - lastParticleTimeRef.current >= scenarioConfig.particleInterval) {
          const particle = createParticle();
          particlesRef.current.push(particle);
          scene.add(particle);
          lastParticleTimeRef.current = currentTime;
        }

        updateParticles(deltaTime);
        label.lookAt(camera.position);
        controls.update();
      }

      renderer.render(scene, camera);
      animationFrameRef.current = requestAnimationFrame(animate);
    };

    animate();

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [isPlaying, scenarioNumber]);

  function createTextCanvas(text) {
    const canvas = document.createElement('canvas');
    canvas.width = 512;
    canvas.height = 128;
    const context = canvas.getContext('2d');
    if (context) {
      context.fillStyle = isDark ? '#ffffff' : '#000000';
      context.font = 'bold 64px Arial';
      context.textAlign = 'center';
      context.textBaseline = 'middle';
      context.fillText(text, 256, 64);
    }
    return canvas;
  }

  return (
    <div
      ref={mountRef}
      className={`border rounded-lg shadow-md ${isDark ? 'bg-gray-800' : 'bg-white'}`}
    />
  );
};

Scenario1.propTypes = {
  isPlaying: PropTypes.bool.isRequired,
  isDark: PropTypes.bool.isRequired,
  scenarioNumber: PropTypes.number,
};

// Fun√ß√£o para obter a configura√ß√£o do cen√°rio
export const getScenarioConfig = () => SCENARIO_CONFIG;

// Exporta a configura√ß√£o como constante
export { SCENARIO_CONFIG };

// Exporta o componente memoizado
export default React.memo(Scenario1);
