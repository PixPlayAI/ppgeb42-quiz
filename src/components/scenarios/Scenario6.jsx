// src/components/scenarios/Scenario6.jsx
import React, { useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import { generateScenarioContent } from '../../services/openai';

// Configura√ß√£o inicial sempre com "Carregando..."
let SCENARIO_CONFIG = {
  id: 'scenario6',
  title: 'Cen√°rio II: Colima√ß√£o de Part√≠culas',
  question: 'Carregando...',
  options: [
    {
      id: 'option1',
      text: 'Carregando...',
      isCorrect: true,
    },
    {
      id: 'option2',
      text: 'Carregando...',
      isCorrect: false,
    },
    {
      id: 'option3',
      text: 'Carregando...',
      isCorrect: false,
    },
    {
      id: 'option4',
      text: 'Carregando...',
      isCorrect: false,
    },
  ],
  successMessage: 'Carregando...',
  detailedExplanation: 'Carregando...',
};

// Vari√°vel para controlar a inicializa√ß√£o
let isInitialized = false;

// Fun√ß√£o para resetar a configura√ß√£o
const resetConfig = () => {
  SCENARIO_CONFIG = {
    id: 'scenario6',
    title: 'Cen√°rio II: Colima√ß√£o de Part√≠culas',
    question: 'Carregando...',
    options: [
      {
        id: 'option1',
        text: 'Carregando...',
        isCorrect: true,
      },
      {
        id: 'option2',
        text: 'Carregando...',
        isCorrect: false,
      },
      {
        id: 'option3',
        text: 'Carregando...',
        isCorrect: false,
      },
      {
        id: 'option4',
        text: 'Carregando...',
        isCorrect: false,
      },
    ],
    successMessage: 'Carregando...',
    detailedExplanation: 'Carregando...',
  };
};

// Prompt para gerar a quest√£o de m√∫ltipla escolha
const scenarioPrompt = `
Gere uma quest√£o de m√∫ltipla escolha sobre o seguinte cen√°rio:

No experimento de colima√ß√£o, part√≠culas radioativas s√£o emitidas de uma fonte e passam por um anteparo que pode ou n√£o colim√°-las corretamente. Observa-se que:
- No Cen√°rio I, o anteparo √© feito de madeira ou outro material inapropriado para colima√ß√£o.
- No Cen√°rio II, o anteparo √© feito de chumbo ou outro material apropriado para colima√ß√£o.

A quest√£o deve avaliar se o aluno sabe identificar o papel do material do anteparo usado na colima√ß√£o das part√≠culas e explicar por que a colima√ß√£o √© melhor em um cen√°rio do que no outro. IMPORTANTE: Os textos devem ser curtos pois o candidato ter√° aproximadamente 20 segundos para ver o cen√°rio, ler tudo e marcar a resposta correta.

Requisitos:
- A quest√£o deve ter 4 alternativas
- Apenas uma alternativa deve estar correta
- As alternativas incorretas devem ser plaus√≠veis mas claramente distingu√≠veis e uma alternativa deve ser absurda e totalmente nada a ver ir√¥nica ou engra√ßada.
- Foque no comportamento das part√≠culas em campos el√©tricos
- Inclua uma mensagem de parab√©ns que reforce o conceito espec√≠fico que o aluno demonstrou dominar
- Inclua uma explica√ß√£o detalhada da resposta correta e porque as outras alternativas est√£o erradas
- Os textos devem ser curtos pois o candidato ter√° aproximadamente 20 segundos para ver o cen√°rio ler tudo e marcar a resposta correta.


Retorne a resposta EXATAMENTE neste formato JSON:
{
  "id": "scenario5",
  "title": "Cen√°rio II: Experimento de Rutherford",
  "question": "[Sua pergunta aqui]",
  "options": [
    {
      "id": "option1",
      "text": "[Texto da primeira alternativa]",
      "isCorrect": true
    },
    {
      "id": "option2",
      "text": "[Texto da segunda alternativa]",
      "isCorrect": false
    },
    {
      "id": "option3",
      "text": "[Texto da terceira alternativa]",
      "isCorrect": false
    },
    {
      "id": "option4",
      "text": "[Texto da quarta alternativa]",
      "isCorrect": false
    }
  ],
  "successMessage": "[Mensagem de parab√©ns explicando porque a resposta est√° correta e refor√ßando o conceito que o aluno dominou], n√£o cite alternativa a, b, c, d ou 1, 2, 3, 4 pois elas s√£o embaralhadas",
  "detailedExplanation": "[Explica√ß√£o detalhada da resposta correta e an√°lise de por que cada uma das outras alternativas est√° incorreta], n√£o cite alternativa a, b, c, d ou 1, 2, 3, 4 pois elas s√£o embaralhadas"
}`;
// Configura√ß√£o atualizada com par√¢metros mais realistas
const getSimulationConfig = (scenarioNumber) => {
  if (scenarioNumber === 1) {
    // Cen√°rio I: Material Inapropriado (Madeira)
    return {
      // Alt√≠ssima transmiss√£o (madeira praticamente n√£o interage)
      transmissionProbability: 0.95,
      // Reflex√£o quase nula
      ricochetProbability: 0.02,
      // Deflex√£o m√≠nima
      deflectionProbability: 0.03,
      // Par√¢metros de espalhamento muito reduzidos
      maxDeflectionAngle: Math.PI / 16, // √Çngulo m√°ximo de deflex√£o reduzido
      energyLossFactor: 0.05, // Perda de energia m√≠nima
      scatteringStrength: 0.1, // Espalhamento muito baixo
    };
  } else {
    // Cen√°rio II: Material Apropriado (Chumbo)
    return {
      // Baixa transmiss√£o (chumbo tem alta densidade)
      transmissionProbability: 0.15,
      // Alta reflex√£o
      ricochetProbability: 0.6,
      // Deflex√£o significativa
      deflectionProbability: 0.25,
      // Par√¢metros de espalhamento mantidos
      maxDeflectionAngle: Math.PI / 8,
      energyLossFactor: 0.5,
      scatteringStrength: 0.3,
    };
  }
};

// Fun√ß√£o auxiliar para calcular o √¢ngulo de espalhamento realista
const getRealisticScatteringAngle = (config) => {
  // Distribui√ß√£o gaussiana para √¢ngulos de espalhamento
  const gaussian = () => {
    let u = 0,
      v = 0;
    while (u === 0) u = Math.random();
    while (v === 0) v = Math.random();
    return Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  };

  // √Çngulo de espalhamento seguindo distribui√ß√£o mais realista
  return gaussian() * config.maxDeflectionAngle * config.scatteringStrength;
};

const Scenario6 = ({ isPlaying, isDark, scenarioNumber = 1 }) => {
  const canvasRef = useRef(null);
  const particlesRef = useRef([]);
  const animationFrameRef = useRef(null);
  const lastParticleTimeRef = useRef(0);

  // Configura√ß√£o espec√≠fica para cada cen√°rio
  const SIMULATION_CONFIG = {
    // Caixa de emiss√£o
    emissionBox: {
      x: 20,
      y: 85,
      width: 60,
      height: 120,
      wallThickness: 10,
    },
    // √Årea de emiss√£o de part√≠culas
    emissionArea: {
      x: 45,
      y: 135,
      width: 10,
      height: 20,
    },
    // Canh√£o
    cannon: {
      x: 30,
      y: 125,
      width: 30,
      height: 40,
    },
    // Colimador
    collimator: {
      x: 120,
      y: 50,
      width: 100, // Aumentado de 60 para 100
      height: 200,
      openingWidth: 30,
      wallThickness: 50, // Aumentado de 30 para 50
      material: scenarioNumber === 1 ? 'inappropriate' : 'appropriate',
    },
    // Tela de detec√ß√£o
    screen: {
      x: 370,
      y: 50,
      width: 10,
      height: 200,
    },
    // Configura√ß√£o das part√≠culas
    particle: {
      color: '#ef4444', // Vermelho
      baseSpeed: 2,
      maxSpeedVariation: 0.3, // Reduzida para comportamento mais consistente
      spreadAngle: Math.PI / 8, // Reduzido para emiss√£o mais concentrada
      size: 2.5,
      trailLength: 10, // Similar ao Scenario2.jsx
    },
    emissionRate: 2,
    maxParticles: 200,
  };

  // Fun√ß√£o para atualizar a configura√ß√£o e disparar evento
  const updateConfig = useCallback((newConfig) => {
    SCENARIO_CONFIG = newConfig;
    window.dispatchEvent(new CustomEvent('scenarioConfigUpdated'));
  }, []);

  useEffect(() => {
    const fetchScenarioContent = async () => {
      // Se j√° foi inicializado, n√£o faz nada
      if (isInitialized) return;

      try {
        isInitialized = true; // Marca como inicializado antes da chamada
        const generatedContent = await generateScenarioContent(scenarioPrompt);

        // Verifica se o conte√∫do foi gerado corretamente
        if (!generatedContent.successMessage || !generatedContent.detailedExplanation) {
          generatedContent.successMessage =
            'Parab√©ns! Voc√™ demonstrou compreender corretamente os conceitos de colima√ß√£o e como diferentes materiais afetam a trajet√≥ria das part√≠culas.';
          generatedContent.detailedExplanation =
            'A resposta correta considera que:\n' +
            '1. O material apropriado (chumbo ou outro material adequado) tem um alto coeficiente de atenua√ß√£o, permitindo uma colima√ß√£o eficaz das part√≠culas.\n' +
            '2. O material inapropriado (madeira ou outro material inadequado) tem um baixo coeficiente de atenua√ß√£o, resultando em maior espalhamento das part√≠culas.\n\n' +
            'As outras alternativas est√£o incorretas porque:\n' +
            '- Confundem os materiais e seus efeitos na colima√ß√£o.\n' +
            '- N√£o consideram corretamente a rela√ß√£o entre o coeficiente de atenua√ß√£o e a colima√ß√£o.\n' +
            '- Fazem associa√ß√µes equivocadas entre tipos de materiais e seus usos em colima√ß√£o. N√£o cite o n√∫mero da alternativa como por exemplo primeira, segunda, terceria, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas';
        }

        // Atualiza a configura√ß√£o
        SCENARIO_CONFIG = {
          ...generatedContent,
          id: 'scenario6',
          title: 'MonteCarloQuiz.online PPGEB42 turma 2024/02',
        };

        // Dispara o evento de atualiza√ß√£o
        updateConfig(SCENARIO_CONFIG);
      } catch (error) {
        console.error('üî¥ Erro ao buscar conte√∫do:', error);
        isInitialized = false; // Reset em caso de erro

        // Configura√ß√£o de fallback
        const fallbackConfig = {
          ...SCENARIO_CONFIG,
          successMessage:
            'Parab√©ns! Voc√™ demonstrou compreender corretamente os conceitos de colima√ß√£o e como diferentes materiais afetam a trajet√≥ria das part√≠culas.',
          detailedExplanation:
            'A resposta correta considera que:\n' +
            '1. O material apropriado (chumbo ou outro material adequado) tem um alto coeficiente de atenua√ß√£o, permitindo uma colima√ß√£o eficaz das part√≠culas.\n' +
            '2. O material inapropriado (madeira ou outro material inadequado) tem um baixo coeficiente de atenua√ß√£o, resultando em maior espalhamento das part√≠culas.\n\n' +
            'As outras alternativas est√£o incorretas porque:\n' +
            '- Confundem os materiais e seus efeitos na colima√ß√£o.\n' +
            '- N√£o consideram corretamente a rela√ß√£o entre o coeficiente de atenua√ß√£o e a colima√ß√£o.\n' +
            '- Fazem associa√ß√µes equivocadas entre tipos de materiais e seus usos em colima√ß√£o. N√£o cite o n√∫mero da alternativa como por exemplo primeira, segunda, terceria, quarta ou A, B, C, D ou 1, 2, 3, 4 pois as alternativas est√£o embaralhadas',
        };

        // Atualiza a configura√ß√£o com fallback
        SCENARIO_CONFIG = fallbackConfig;
        updateConfig(SCENARIO_CONFIG);
      }
    };

    resetConfig();
    fetchScenarioContent();

    // Cleanup
    return () => {
      // N√£o reseta isInitialized no cleanup para manter o cache
    };
  }, [updateConfig]);

  // Fun√ß√£o para criar uma nova part√≠cula com comportamento semelhante ao Scenario2.jsx
  const createParticle = () => {
    const angle = (Math.random() - 0.5) * SIMULATION_CONFIG.particle.spreadAngle;
    const speedVariation = (Math.random() - 0.5) * SIMULATION_CONFIG.particle.maxSpeedVariation;
    const speed = SIMULATION_CONFIG.particle.baseSpeed + speedVariation;

    const emissionX =
      SIMULATION_CONFIG.emissionArea.x + Math.random() * SIMULATION_CONFIG.emissionArea.width;
    const emissionY =
      SIMULATION_CONFIG.emissionArea.y + Math.random() * SIMULATION_CONFIG.emissionArea.height;

    return {
      id: `particle-${Date.now()}-${Math.random()}`,
      color: SIMULATION_CONFIG.particle.color,
      x: emissionX,
      y: emissionY,
      vx: speed * Math.cos(angle),
      vy: speed * Math.sin(angle),
      speed: speed,
      active: true,
      passedCollimator: false,
      trail: [{ x: emissionX, y: emissionY }],
    };
  };

  // Fun√ß√£o atualizada para colis√£o com o colimador
  const handleCollimatorCollision = (particle, collimator, openingY) => {
    const config = getSimulationConfig(collimator.material === 'appropriate' ? 2 : 1);
    const openingCenter = openingY + collimator.openingWidth / 2;

    if (particle.y >= openingY && particle.y <= openingY + collimator.openingWidth) {
      if (collimator.material === 'appropriate') {
        // Colima√ß√£o mais forte para material apropriado
        const centerOffset = openingCenter - particle.y;
        // Corre√ß√£o mais forte da trajet√≥ria em dire√ß√£o ao centro
        particle.vy += centerOffset * 0.015; // Aumentado de 0.01 para 0.015

        // Alinhamento mais forte com o eixo horizontal
        const currentAngle = Math.atan2(particle.vy, particle.vx);
        const correction = -currentAngle * 0.3; // Aumentado de 0.2 para 0.3

        // Rota√ß√£o do vetor velocidade
        const speed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);
        particle.vx = speed * Math.cos(currentAngle + correction);
        particle.vy = speed * Math.sin(currentAngle + correction);

        // Maior perda de energia na passagem
        particle.speed *= 1 - config.energyLossFactor * 0.15; // Aumentado de 0.1 para 0.15
      } else {
        // Comportamento da madeira permanece o mesmo
        const minimalPerturbation = (Math.random() - 0.5) * 0.02;
        particle.vy += minimalPerturbation;
        particle.speed *= 1 - config.energyLossFactor;
      }
    } else {
      // Colis√£o com a parede mais grossa
      const rand = Math.random();

      if (collimator.material === 'appropriate') {
        if (rand < config.ricochetProbability) {
          particle.vx *= -1 * (1 - config.energyLossFactor);
          particle.vy += (Math.random() - 0.5) * 0.2;
        } else if (rand < config.ricochetProbability + config.deflectionProbability) {
          const scatteringAngle = getRealisticScatteringAngle(config);
          const speed = particle.speed * (1 - config.energyLossFactor);
          particle.vx = speed * Math.cos(scatteringAngle);
          particle.vy = speed * Math.sin(scatteringAngle);
        } else {
          particle.active = false;
        }
      } else {
        // Comportamento da madeira permanece praticamente inalterado
        if (rand > config.transmissionProbability) {
          const minimalScatteringAngle = (Math.random() - 0.5) * config.maxDeflectionAngle;
          particle.vx += Math.cos(minimalScatteringAngle) * 0.1;
          particle.vy += Math.sin(minimalScatteringAngle) * 0.1;
          particle.speed *= 1 - config.energyLossFactor;
        }
      }
    }

    // Normaliza√ß√£o da velocidade ap√≥s modifica√ß√µes
    if (particle.active) {
      const currentSpeed = Math.sqrt(particle.vx * particle.vx + particle.vy * particle.vy);
      particle.vx = (particle.vx / currentSpeed) * particle.speed;
      particle.vy = (particle.vy / currentSpeed) * particle.speed;
    }
  };

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext('2d');
    const particleInterval = 10; // Intervalo de emiss√£o em milissegundos

    const drawEmissionBox = () => {
      const box = SIMULATION_CONFIG.emissionBox;
      ctx.fillStyle = '#4b5563';

      // Paredes da caixa
      ctx.fillRect(box.x, box.y, box.wallThickness, box.height); // Esquerda
      ctx.fillRect(box.x + box.width - box.wallThickness, box.y, box.wallThickness, box.height); // Direita
      ctx.fillRect(box.x, box.y, box.width, box.wallThickness); // Superior
      ctx.fillRect(box.x, box.y + box.height - box.wallThickness, box.width, box.wallThickness); // Inferior

      // Abertura de sa√≠da
      const holeY = box.y + (box.height - SIMULATION_CONFIG.collimator.openingWidth) / 2;
      ctx.fillStyle = isDark ? '#1f2937' : '#e5e7eb';
      ctx.fillRect(
        box.x + box.width - box.wallThickness,
        holeY,
        box.wallThickness,
        SIMULATION_CONFIG.collimator.openingWidth
      );
    };

    // ... (resto do c√≥digo permanece igual)

    const animate = () => {
      const currentTime = Date.now();

      // Limpa o canvas e redesenha o fundo
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      ctx.fillStyle = isDark ? '#1f2937' : '#e5e7eb';
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Desenha os labels
      ctx.fillStyle = isDark ? '#e5e7eb' : '#1f2937';
      ctx.font = 'bold 20px Arial';
      ctx.textAlign = 'center';
      ctx.fillText(`Cen√°rio ${scenarioNumber}`, canvas.width / 2, 30);
      ctx.font = '14px Arial';

      // Desenha os elementos est√°ticos
      drawEmissionBox();

      // Desenha o canh√£o
      const cannon = SIMULATION_CONFIG.cannon;
      ctx.fillStyle = '#374151';
      ctx.fillRect(cannon.x, cannon.y, cannon.width, cannon.height);

      // Desenha o colimador
      const collimator = SIMULATION_CONFIG.collimator;
      ctx.fillStyle = '#4b5563';
      ctx.fillRect(collimator.x, collimator.y, collimator.width, collimator.height);

      // Abertura do colimador
      const openingY = collimator.y + (collimator.height - collimator.openingWidth) / 2;
      ctx.fillStyle = isDark ? '#1f2937' : '#e5e7eb';
      ctx.fillRect(
        collimator.x,
        openingY,
        collimator.width,
        SIMULATION_CONFIG.collimator.openingWidth
      );

      // Tela de detec√ß√£o
      const screen = SIMULATION_CONFIG.screen;
      ctx.fillStyle = '#6b7280';
      ctx.fillRect(screen.x, screen.y, screen.width, screen.height);

      // Atualiza√ß√£o e desenho das part√≠culas
      if (isPlaying) {
        // Criar novas part√≠culas apenas se estiver rodando
        if (
          currentTime - lastParticleTimeRef.current > particleInterval &&
          particlesRef.current.length < SIMULATION_CONFIG.maxParticles
        ) {
          particlesRef.current.push(createParticle());
          lastParticleTimeRef.current = currentTime;
        }

        // Atualizar posi√ß√µes apenas se estiver rodando
        particlesRef.current = particlesRef.current.filter((particle) => {
          if (!particle.active) return false;

          // Atualiza posi√ß√£o
          particle.x += particle.vx;
          particle.y += particle.vy;

          // Intera√ß√£o com o colimador
          if (
            !particle.passedCollimator &&
            particle.x >= collimator.x &&
            particle.x <= collimator.x + collimator.width
          ) {
            handleCollimatorCollision(particle, collimator, openingY);
            particle.passedCollimator = true;
          }

          // Remove part√≠culas que sa√≠ram do canvas
          if (particle.x > canvas.width || particle.y < 0 || particle.y > canvas.height) {
            return false;
          }

          // Atualiza a trilha
          particle.trail.push({ x: particle.x, y: particle.y });
          if (particle.trail.length > SIMULATION_CONFIG.particle.trailLength) {
            particle.trail.shift();
          }

          return true;
        });
      }

      // Desenha as part√≠culas independentemente do estado de isPlaying
      particlesRef.current.forEach((particle) => {
        // Desenha a trilha
        if (particle.trail.length > 1) {
          ctx.beginPath();
          ctx.moveTo(particle.trail[0].x, particle.trail[0].y);
          for (let i = 1; i < particle.trail.length; i++) {
            ctx.lineTo(particle.trail[i].x, particle.trail[i].y);
          }
          ctx.strokeStyle = 'rgba(239, 68, 68, 0.3)';
          ctx.lineWidth = SIMULATION_CONFIG.particle.size;
          ctx.stroke();
        }

        // Desenha a part√≠cula
        ctx.beginPath();
        ctx.arc(particle.x, particle.y, SIMULATION_CONFIG.particle.size, 0, Math.PI * 2);
        ctx.fillStyle = '#ef4444';
        ctx.fill();
      });

      animationFrameRef.current = requestAnimationFrame(animate);
    };
    animationFrameRef.current = requestAnimationFrame(animate);

    return () => {
      if (animationFrameRef.current) {
        cancelAnimationFrame(animationFrameRef.current);
      }
    };
  }, [isPlaying, isDark, scenarioNumber]);

  return (
    <canvas
      ref={canvasRef}
      width={440}
      height={320}
      className={`border rounded-lg shadow-md ${isDark ? 'bg-gray-800' : 'bg-white'}`}
    />
  );
};

Scenario6.propTypes = {
  isPlaying: PropTypes.bool.isRequired,
  isDark: PropTypes.bool.isRequired,
  scenarioNumber: PropTypes.number,
};

// Fun√ß√£o para obter a configura√ß√£o do cen√°rio
export const getScenarioConfig = () => SCENARIO_CONFIG;

// Exporta a configura√ß√£o como constante
export { SCENARIO_CONFIG };

// Exporta o componente memoizado
export default React.memo(Scenario6);
